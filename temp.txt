DRAWBOARD:

App.jsx

import { useState, useEffect } from "react";
import {useDraw} from '../hooks/useDraw'

const App = () => {
    const [color, setColor] = useState('#000');
    const { canvasRef, onMouseDown, clear } = useDraw(drawLine);

    function drawLine(ctx, currentPoint, prevPoint) {
        const { x: currX, y: currY } = currentPoint;
        const lineColor = color;
        const lineWidth = 5;

        let startPoint = prevPoint ?? currentPoint;
        ctx.beginPath();
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = lineColor;
        ctx.moveTo(startPoint.x, startPoint.y);
        ctx.lineTo(currX, currY);
        ctx.stroke();

        ctx.fillStyle = lineColor;
        ctx.beginPath();
        ctx.arc(startPoint.x, startPoint.y, 2, 0, 2 * Math.PI);
        ctx.fill();
    }

    return (
        <div className='w-screen h-screen bg-white flex justify-center items-center'>
            <canvas
                ref={canvasRef}
                onMouseDown={onMouseDown}
                width={750}
                height={750}
                className='border border-black rounded-md'
            />
        </div>
    );
};


export default App

useDraw.jsx

import { useState, useEffect, useRef } from "react";

export const useDraw = (onDraw) => {
    const [mouseDown, setMouseDown] = useState(false);
    const canvasContainerRef = useRef(null);
    const canvasRef = useRef(null);
    const prevPoint = useRef(null);

    const onMouseDown = () => setMouseDown(true);

    const clear = () => {
        const canvas = canvasRef.current;
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        ctx.clearRect(0, 0, canvas.width, canvas.height);
    };

    useEffect(() => {
        const handler = (e) => {
            if (!mouseDown) return;
            const currentPoint = computePointInCanvas(e);

            const ctx = canvasRef.current?.getContext('2d');
            if (!ctx || !currentPoint) return;

            onDraw(ctx, currentPoint, prevPoint.current);
            prevPoint.current = currentPoint;
        };

        const computePointInCanvas = (e) => {
            const canvas = canvasRef.current;
            if (!canvas) return;

            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            return { x, y };
        };

        const mouseUpHandler = () => {
            setMouseDown(false);
            prevPoint.current = null;
        };

        // Add event listeners
        canvasRef.current?.addEventListener('mousemove', handler);
        window.addEventListener('mouseup', mouseUpHandler);

        // Remove event listeners
        return () => {
            canvasRef.current?.removeEventListener('mousemove', handler);
            window.removeEventListener('mouseup', mouseUpHandler);
        };
    }, [onDraw]);

    return { canvasContainerRef, canvasRef, onMouseDown, clear };
};
